scalar DateTime

# Schema GraphQL para Editor - Versi√≥n limpia sin duplicados

# Tipos principales
type Editor {
  id: ID!
  objectLayers: [EditorObjectLayer]
  objectLayerSelected: EditorObjectLayer
  userId: String!
  projectId: String!
  activeDrawLine: DrawLine
  editorDimension: Dimension
  screenInfo: EditorScreenInfo
  editorMetadata: EditorMetaData
}

type EditorResponse {
  success: Boolean!
  message: String
  errorCode: String
  editor: Editor
  timestamp: String
  operation: String
  executionTimeMs: Int
  stats: EditorStats
  warnings: [String]
  hasUnsavedChanges: Boolean
}

type EditorStats {
  totalLayers: Int
  visibleLayers: Int
  layersWithImages: Int
  layersWithDrawing: Int
  totalImageSize: Int
  totalDrawingPoints: Int
  zoomLevel: Int
  visualMode: String
  hasComplexLayers: Boolean
  averageLayerComplexity: Float
}

type EditorObjectLayer {
  id: ID!
  transform: Transform
  state: State
  style: Style
  drawLine: DrawLine
  hasImageContent: Boolean
  imageContent: ImageContent
  objectMetadata: EditorMetaData
}

type ImageContent {
  image: String
  src: String
  loading: Boolean!
}

type Transform {
  posX: Float
  posY: Float
  width: Float
  height: Float
  radius: Float
  rotation: Float
  scaleX: Float
  scaleY: Float
  points: [Float]
}

type State {
  objectLayerSelectedId: ID
  draggable: Boolean
  isSelected: Boolean
  isVisible: Boolean
}

type Style {
  tool: String
  fill: String
  color: String
  stroke: Float
  strokeWidth: Float
  zIndex: Int
}

type DrawLine {
  tool: Tool!
  lines: [Int]
  brush: Brush
}

type Brush {
  color: String
  fill: String
  size: Int
}

type Dimension {
  width: Float
  height: Float
}

type EditorScreenInfo {
  zoom: Int
  visualMode: VisualMode
  status: Boolean
}

type EditorMetaData {
  createdAt: String
  updatedAt: String
}

# Enums
enum Tool {
  BRUSH
  ERASER
  LINE
  RECTANGLE
  CIRCLE
  TEXT
  SELECT
  MOVE
}

enum VisualMode {
  NORMAL
  DARK
  HIGH_CONTRAST
}

# Inputs para mutations
input RequestEditor {
  projectId: String!
  userId: String!
}

input UpdateEditorInput {
  objectLayers: [EditorObjectLayerInput]
  objectLayerSelected: EditorObjectLayerInput
  userId: String!
  projectId: String!
  activeDrawLine: DrawLineInput
  editorDimension: DimensionInput
  screenInfo: EditorScreenInfoInput
  editorMetadata: EditorMetaDataInput
}

input EditorObjectLayerInput {
  id: ID
  transform: TransformInput
  state: StateInput
  style: StyleInput
  drawLine: DrawLineInput
  hasImageContent: Boolean
  imageContent: ImageContentInput
  objectMetadata: EditorMetaDataInput
}

input ImageContentInput {
  image: String
  src: String
  loading: Boolean
}

input TransformInput {
  posX: Float
  posY: Float
  width: Float
  height: Float
  radius: Float
  rotation: Float
  scaleX: Float
  scaleY: Float
  points: [Float]
}

input StateInput {
  objectLayerSelectedId: ID
  draggable: Boolean
  isSelected: Boolean
  isVisible: Boolean
}

input StyleInput {
  tool: String
  fill: String
  color: String
  stroke: Float
  strokeWidth: Float
  zIndex: Int
}

input DrawLineInput {
  tool: Tool!
  lines: [Int]
  brush: BrushInput
}

input BrushInput {
  color: String
  fill: String
  size: Int
}

input DimensionInput {
  width: Float
  height: Float
}

input EditorScreenInfoInput {
  zoom: Int
  visualMode: VisualMode
  status: Boolean
}

input EditorMetaDataInput {
  createdAt: String
  updatedAt: String
}

# Queries
type Query {
  getEditor(input: RequestEditor!): EditorResponse!
  editorExists(projectId: String!): Boolean!
  getEditorStats(input: RequestEditor!): EditorStats
}

# Mutations
type Mutation {
  createEditor(input: RequestEditor!): EditorResponse!
  updateEditor(input: UpdateEditorInput!): EditorResponse!
}
